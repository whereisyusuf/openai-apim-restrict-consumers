<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-variable name="maxtokens" value="0" />
        <cache-lookup-value key="maxtokens" variable-name="maxtokens" />
        <choose>
            <when condition="@(int.Parse((string)context.Variables["maxtokens"]) >= 100)">
                <return-response>
                    <set-status code="429" reason="Max tokens Reached" />
                    <set-body>@{ return "Max tokens limit reached"; }</set-body>
                </return-response>
            </when>
        </choose>
       <rate-limit-by-key calls="3" renewal-period="60" counter-key="@(context.Subscription?.Key ?? "anonymous")" increment-condition="@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 300)" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <cache-store-value key="maxtokens" value="@{
                    var prevmaxtokens=(string)context.Variables["maxtokens"];
                    var response=context.Response.Body.As<JObject>(preserveContent: true).SelectToken("usage.total_tokens").ToString();
                    var finaltokens=int.Parse(prevmaxtokens)+int.Parse(response);
                    return finaltokens.ToString();
                }" duration="60" />
            </when>
            <otherwise />
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
